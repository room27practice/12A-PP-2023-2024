// <auto-generated />
using Geo.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Geo.Migrations
{
    [DbContext(typeof(GeographyDBContext))]
    [Migration("20221111091720_change1")]
    partial class change1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Geo.Models.Continent", b =>
                {
                    b.Property<string>("ContinentCode")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .IsFixedLength(true);

                    b.Property<double>("ContinentArea")
                        .HasColumnType("float");

                    b.Property<string>("ContinentName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ContinentCode");

                    b.ToTable("Continents");
                });

            modelBuilder.Entity("Geo.Models.CountriesRiver", b =>
                {
                    b.Property<string>("CountryCode")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .IsFixedLength(true);

                    b.Property<int>("RiverId")
                        .HasColumnType("int");

                    b.HasKey("CountryCode", "RiverId");

                    b.HasIndex("RiverId");

                    b.ToTable("CountriesRivers");
                });

            modelBuilder.Entity("Geo.Models.Country", b =>
                {
                    b.Property<string>("CountryCode")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .IsFixedLength(true);

                    b.Property<int>("AreaInSqKm")
                        .HasColumnType("int");

                    b.Property<string>("Capital")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("ContinentCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .IsFixedLength(true);

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("CurrencyCode")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .IsFixedLength(true);

                    b.Property<string>("IsoCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .IsFixedLength(true);

                    b.Property<int>("Population")
                        .HasColumnType("int");

                    b.HasKey("CountryCode");

                    b.HasIndex("ContinentCode");

                    b.HasIndex("CurrencyCode");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Geo.Models.Currency", b =>
                {
                    b.Property<string>("CurrencyCode")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .IsFixedLength(true);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("CurrencyCode");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("Geo.Models.Mountain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MountainRange")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Mountains");
                });

            modelBuilder.Entity("Geo.Models.MountainsCountry", b =>
                {
                    b.Property<int>("MountainId")
                        .HasColumnType("int");

                    b.Property<string>("CountryCode")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .IsFixedLength(true);

                    b.HasKey("MountainId", "CountryCode")
                        .HasName("PK_MountainsContinents");

                    b.HasIndex("CountryCode");

                    b.ToTable("MountainsCountries");
                });

            modelBuilder.Entity("Geo.Models.Peak", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Elevation")
                        .HasColumnType("int");

                    b.Property<int>("MountainId")
                        .HasColumnType("int");

                    b.Property<string>("PeakName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("MountainId");

                    b.ToTable("Peaks");
                });

            modelBuilder.Entity("Geo.Models.River", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AverageDischarge")
                        .HasColumnType("int");

                    b.Property<int>("DrainageArea")
                        .HasColumnType("int");

                    b.Property<int>("Length")
                        .HasColumnType("int");

                    b.Property<string>("Outflow")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RiverName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Rivers");
                });

            modelBuilder.Entity("Geo.Models.CountriesRiver", b =>
                {
                    b.HasOne("Geo.Models.Country", "CountryCodeNavigation")
                        .WithMany("CountriesRivers")
                        .HasForeignKey("CountryCode")
                        .HasConstraintName("FK_CountriesRivers_Countries")
                        .IsRequired();

                    b.HasOne("Geo.Models.River", "River")
                        .WithMany("CountriesRivers")
                        .HasForeignKey("RiverId")
                        .HasConstraintName("FK_CountriesRivers_Rivers")
                        .IsRequired();

                    b.Navigation("CountryCodeNavigation");

                    b.Navigation("River");
                });

            modelBuilder.Entity("Geo.Models.Country", b =>
                {
                    b.HasOne("Geo.Models.Continent", "ContinentCodeNavigation")
                        .WithMany("Countries")
                        .HasForeignKey("ContinentCode")
                        .HasConstraintName("FK_Countries_Continents")
                        .IsRequired();

                    b.HasOne("Geo.Models.Currency", "CurrencyCodeNavigation")
                        .WithMany("Countries")
                        .HasForeignKey("CurrencyCode")
                        .HasConstraintName("FK_Countries_Currencies");

                    b.Navigation("ContinentCodeNavigation");

                    b.Navigation("CurrencyCodeNavigation");
                });

            modelBuilder.Entity("Geo.Models.MountainsCountry", b =>
                {
                    b.HasOne("Geo.Models.Country", "CountryCodeNavigation")
                        .WithMany("MountainsCountries")
                        .HasForeignKey("CountryCode")
                        .HasConstraintName("FK_MountainsCountries_Countries")
                        .IsRequired();

                    b.HasOne("Geo.Models.Mountain", "Mountain")
                        .WithMany("MountainsCountries")
                        .HasForeignKey("MountainId")
                        .HasConstraintName("FK_MountainsCountries_Mountains")
                        .IsRequired();

                    b.Navigation("CountryCodeNavigation");

                    b.Navigation("Mountain");
                });

            modelBuilder.Entity("Geo.Models.Peak", b =>
                {
                    b.HasOne("Geo.Models.Mountain", "Mountain")
                        .WithMany("Peaks")
                        .HasForeignKey("MountainId")
                        .HasConstraintName("FK_Peaks_Mountains")
                        .IsRequired();

                    b.Navigation("Mountain");
                });

            modelBuilder.Entity("Geo.Models.Continent", b =>
                {
                    b.Navigation("Countries");
                });

            modelBuilder.Entity("Geo.Models.Country", b =>
                {
                    b.Navigation("CountriesRivers");

                    b.Navigation("MountainsCountries");
                });

            modelBuilder.Entity("Geo.Models.Currency", b =>
                {
                    b.Navigation("Countries");
                });

            modelBuilder.Entity("Geo.Models.Mountain", b =>
                {
                    b.Navigation("MountainsCountries");

                    b.Navigation("Peaks");
                });

            modelBuilder.Entity("Geo.Models.River", b =>
                {
                    b.Navigation("CountriesRivers");
                });
#pragma warning restore 612, 618
        }
    }
}
